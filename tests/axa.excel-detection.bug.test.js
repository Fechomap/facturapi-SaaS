// tests/axa.excel-detection.bug.test.js - Investigar bug de detecci√≥n Excel
import { jest } from '@jest/globals';

describe('AXA - BUG DETECCI√ìN EXCEL', () => {
  beforeEach(() => {
    jest.clearAllMocks();
  });

  test('BUG REPRODUCIDO: Primer Excel no detectado, segundo s√≠', () => {
    console.log('üö® REPRODUCIENDO: Bug de detecci√≥n Excel');

    const userId = 123456789;
    const mockCtx = {
      from: { id: userId },
      userState: {
        tenantId: 'test-tenant',
        axaClientId: 'axa-client-123',
      },
      message: {
        document: {
          file_name: 'AXA.xls',
          file_id: 'test-file-123',
        },
      },
    };

    // ESCENARIO 1: Usuario presiona menu_axa
    console.log('üëÜ PASO 1: Usuario presiona bot√≥n menu_axa');
    mockCtx.userState.esperando = 'archivo_excel_axa';
    console.log('‚úÖ Estado despu√©s de menu_axa:', mockCtx.userState.esperando);

    // PROBLEMA: Estado se puede perder antes de que llegue el Excel
    console.log('‚è∞ TIMING: Pasa tiempo entre bot√≥n y env√≠o de Excel...');

    // Simular que el estado se "resetea" o no se guarda correctamente
    mockCtx.userState.esperando = null; // ¬°PROBLEMA!

    // ESCENARIO 2: Usuario env√≠a Excel (PRIMER INTENTO)
    console.log('üìé PASO 2: Usuario env√≠a Excel (primer intento)');
    const excelDetectado1 = mockCtx.userState.esperando === 'archivo_excel_axa';
    console.log(
      `‚ùå PRIMER INTENTO: esperando="${mockCtx.userState.esperando}", detectado=${excelDetectado1}`
    );

    // Excel NO se procesa porque esperando es null
    expect(excelDetectado1).toBe(false);

    // ESCENARIO 3: Usuario presiona menu_axa OTRA VEZ
    console.log('üëÜ PASO 3: Usuario presiona menu_axa otra vez');
    mockCtx.userState.esperando = 'archivo_excel_axa';

    // ESCENARIO 4: Usuario env√≠a Excel (SEGUNDO INTENTO)
    console.log('üìé PASO 4: Usuario env√≠a Excel (segundo intento)');
    const excelDetectado2 = mockCtx.userState.esperando === 'archivo_excel_axa';
    console.log(
      `‚úÖ SEGUNDO INTENTO: esperando="${mockCtx.userState.esperando}", detectado=${excelDetectado2}`
    );

    expect(excelDetectado2).toBe(true);

    console.log('üéØ BUG CONFIRMADO: Estado "esperando" se pierde entre bot√≥n y Excel');
  });

  test('INVESTIGAR: ¬øPor qu√© se pierde el estado "esperando"?', async () => {
    console.log('üîç INVESTIGANDO: Causas del estado perdido');

    const mockSessionService = {
      saveUserState: jest.fn().mockResolvedValue({}),
      getUserState: jest.fn(),
    };

    const userId = 123456789;

    // HIP√ìTESIS 1: Session write tarda mucho
    console.log('üïê HIP√ìTESIS 1: Session write lento');
    mockSessionService.saveUserState.mockImplementationOnce(
      () => new Promise((resolve) => setTimeout(resolve, 2000)) // 2 segundos
    );

    const estado = { esperando: 'archivo_excel_axa' };
    const saveStart = Date.now();

    // Usuario presiona bot√≥n (inicia guardado)
    const savePromise = mockSessionService.saveUserState(userId, estado);

    // Usuario env√≠a Excel ANTES de que termine el guardado
    const timingRapido = Date.now() - saveStart;
    console.log(`‚ö° Usuario env√≠a Excel despu√©s de ${timingRapido}ms`);
    console.log('‚ùå PROBLEMA: Guardado a√∫n no termin√≥');

    // Esperar a que termine el guardado
    await savePromise;
    const saveDuration = Date.now() - saveStart;
    console.log(`üíæ Guardado completado despu√©s de ${saveDuration}ms`);

    expect(saveDuration).toBeGreaterThan(timingRapido);
    console.log('üéØ CAUSA IDENTIFICADA: Usuario m√°s r√°pido que el guardado');
  });

  test('HIP√ìTESIS 2: Middleware session no persiste inmediatamente', () => {
    console.log('üîç HIP√ìTESIS 2: Middleware timing');

    const mockCtx = {
      userState: {
        tenantId: 'test-tenant',
        esperando: null,
      },
    };

    // Simular click en menu_axa
    console.log('üëÜ Bot√≥n menu_axa presionado');
    mockCtx.userState.esperando = 'archivo_excel_axa';
    console.log('State modificado:', mockCtx.userState.esperando);

    // Simular que middleware a√∫n no guard√≥
    console.log('‚è∞ Middleware a√∫n procesando...');

    // Usuario env√≠a Excel antes de que middleware termine
    const estadoAlRecibirExcel = mockCtx.userState.esperando;
    console.log('üìé Excel recibido, estado actual:', estadoAlRecibirExcel);

    // Si middleware es lento, el estado puede estar desactualizado
    if (estadoAlRecibirExcel !== 'archivo_excel_axa') {
      console.log('‚ùå PROBLEMA: Estado no actualizado a tiempo');
    } else {
      console.log('‚úÖ Estado correcto');
    }

    expect(estadoAlRecibirExcel).toBe('archivo_excel_axa');
  });

  test('SOLUCI√ìN PROPUESTA: Verificar estado en m√∫ltiples fuentes', () => {
    console.log('üí° SOLUCI√ìN: Fallback robusto para detecci√≥n Excel');

    const userId = 123456789;
    const mockCtx = {
      from: { id: userId },
      userState: {
        esperando: null, // Estado perdido
      },
      message: {
        document: {
          file_name: 'AXA.xls',
        },
      },
    };

    // Simular que hay un flag en cache global
    global.tempAxaData = {};
    global.tempAxaData[userId] = {
      esperandoExcel: true,
      timestamp: Date.now(),
    };

    console.log('üîç VERIFICANDO: Estado en userState y cache global');

    // L√≥gica de detecci√≥n robusta
    function debeDetectarExcel(ctx) {
      const userId = ctx.from.id;

      // OPCI√ìN 1: userState dice que espera Excel
      if (ctx.userState.esperando === 'archivo_excel_axa') {
        console.log('‚úÖ Detectado por userState');
        return true;
      }

      // OPCI√ìN 2: Cache global indica que est√° esperando
      const tempData = global.tempAxaData && global.tempAxaData[userId];
      if (tempData && tempData.esperandoExcel) {
        const tiempoEspera = Date.now() - tempData.timestamp;
        if (tiempoEspera < 300000) {
          // 5 minutos max
          console.log(`‚úÖ Detectado por cache global (${tiempoEspera}ms ago)`);
          return true;
        }
      }

      // OPCI√ìN 3: Verificar si tiene axaClientId (indica flujo AXA activo)
      if (ctx.userState.axaClientId && !ctx.userState.facturaGenerada) {
        console.log('‚úÖ Detectado por axaClientId sin factura completada');
        return true;
      }

      console.log('‚ùå No detectado por ninguna fuente');
      return false;
    }

    const detectado = debeDetectarExcel(mockCtx);
    expect(detectado).toBe(true);

    console.log('‚úÖ SOLUCI√ìN: Detecci√≥n robusta con m√∫ltiples fallbacks');
  });

  test('EDGE CASE: Usuario abre m√∫ltiples tabs', () => {
    console.log('üîç EDGE CASE: M√∫ltiples tabs pueden causar confusi√≥n');

    const userId = 123456789;

    // Tab 1: Presiona menu_axa
    const tab1State = { esperando: 'archivo_excel_axa', timestamp: Date.now() };

    // Tab 2: Presiona menu_chubb (sobrescribe estado)
    const tab2State = { esperando: 'archivo_excel_chubb', timestamp: Date.now() + 1000 };

    // Usuario env√≠a Excel desde Tab 1
    console.log('üìé Excel enviado desde Tab 1 (esperaba AXA)');
    console.log('üíæ Pero estado actual es:', tab2State.esperando);

    // Excel no ser√° detectado para AXA
    const esDetectadoParaAxa = tab2State.esperando === 'archivo_excel_axa';
    expect(esDetectadoParaAxa).toBe(false);

    console.log('‚ùå PROBLEMA: M√∫ltiples tabs causan conflictos de estado');
    console.log('üí° SOLUCI√ìN: Usar cache por sesi√≥n espec√≠fica');
  });

  test('PERFORMANCE: Validar que soluci√≥n no afecte velocidad', () => {
    console.log('‚ö° PERFORMANCE: Verificar impacto de detecci√≥n robusta');

    const userId = 123456789;
    const mockCtx = {
      from: { id: userId },
      userState: { esperando: 'archivo_excel_axa' },
      message: { document: { file_name: 'AXA.xls' } },
    };

    // M√©todo actual (simple)
    const simpleStart = Date.now();
    const detectadoSimple = mockCtx.userState.esperando === 'archivo_excel_axa';
    const simpleDuration = Date.now() - simpleStart;

    // M√©todo robusto (con fallbacks)
    global.tempAxaData[userId] = { esperandoExcel: true, timestamp: Date.now() };

    const robustoStart = Date.now();
    const detectadoRobusto =
      mockCtx.userState.esperando === 'archivo_excel_axa' ||
      (global.tempAxaData[userId] && global.tempAxaData[userId].esperandoExcel) ||
      (mockCtx.userState.axaClientId && !mockCtx.userState.facturaGenerada);
    const robustoDuration = Date.now() - robustoStart;

    console.log(`üèÉ M√©todo simple: ${simpleDuration}ms`);
    console.log(`üõ°Ô∏è M√©todo robusto: ${robustoDuration}ms`);
    console.log(`üìä Diferencia: ${robustoDuration - simpleDuration}ms`);

    expect(detectadoSimple).toBe(true);
    expect(detectadoRobusto).toBe(true);
    expect(robustoDuration).toBeLessThan(5); // Debe seguir siendo r√°pido

    console.log('‚úÖ PERFORMANCE: Soluci√≥n robusta sin impacto significativo');
  });
});
