// bot.js - Punto de entrada para el bot de Telegram
import { Telegraf } from 'telegraf';
import { config, initConfig } from './config/index.js';
import { connectDatabase } from './config/database.js';
import { sessionMiddleware } from './core/auth/session.service.js';
import tenantContextMiddleware from './core/tenant/tenant.middleware.js';
import logger from './core/utils/logger.js';

// Logger espec√≠fico para el bot
const botLogger = logger.child({ module: 'telegram-bot' });

// Funci√≥n para inicializar el bot de Telegram
async function initializeBot() {
  // Inicializar configuraci√≥n
  await initConfig();
  
  // Verificar que el token est√° configurado
  if (!config.telegram.token) {
    botLogger.error('Token de Telegram no configurado');
    throw new Error('Token de Telegram no configurado. Configura TELEGRAM_BOT_TOKEN en tu archivo .env');
  }
  
  // Inicializar bot con token de Telegram
  const bot = new Telegraf(config.telegram.token);
  
  // Middleware para gestionar la sesi√≥n de usuario
  bot.use(sessionMiddleware);
  
  // Middleware para a√±adir informaci√≥n del tenant al contexto
  bot.use(tenantContextMiddleware);
  
  // Middleware para manejo global de errores
  bot.catch((err, ctx) => {
    botLogger.error(
      { 
        error: err, 
        userId: ctx.from?.id, 
        username: ctx.from?.username,
        command: ctx.message?.text 
      }, 
      'Error no controlado en el bot'
    );
    
    ctx.reply('‚ùå Ha ocurrido un error inesperado. Por favor, intenta de nuevo m√°s tarde.');
  });
  
  // Comando de inicio b√°sico
  bot.start((ctx) => {
    botLogger.info({ userId: ctx.from.id, username: ctx.from.username }, 'Comando start recibido');
    
    return ctx.reply(
      `¬°Bienvenido al Sistema de Facturaci√≥n SaaS, ${ctx.from.first_name}!\n\n` +
      `Este bot est√° en proceso de implementaci√≥n. Pronto podr√°s utilizarlo para generar facturas de forma automatizada.`
    );
  });
  
  // Comando de ayuda b√°sico
  bot.help((ctx) => {
    botLogger.info({ userId: ctx.from.id, username: ctx.from.username }, 'Comando help recibido');
    
    return ctx.reply(
      'ü§ñ *Bot de Facturaci√≥n SaaS - Ayuda*\n\n' +
      'Este bot te permite generar facturas electr√≥nicas para tu empresa de forma sencilla.\n\n' +
      '*Comandos disponibles:*\n' +
      '‚Ä¢ /start - Iniciar el bot\n' +
      '‚Ä¢ /help - Mostrar este mensaje de ayuda',
      { parse_mode: 'Markdown' }
    );
  });
  
  return bot;
}

// Funci√≥n principal para iniciar el bot
async function startBot() {
  try {
    // Conectar a la base de datos
    await connectDatabase();
    botLogger.info('Conexi√≥n a base de datos establecida');
    
    // Inicializar el bot
    const bot = await initializeBot();
    
    // Iniciar el bot
    await bot.launch();
    botLogger.info('Bot de Telegram iniciado correctamente');
    botLogger.info(`Entorno: ${config.env}`);
    botLogger.info(`Nombre del bot: @${(await bot.telegram.getMe()).username}`);
    
    // Habilitar el cierre correcto
    process.once('SIGINT', () => {
      botLogger.info('Se√±al SIGINT recibida, deteniendo bot');
      bot.stop('SIGINT');
    });
    process.once('SIGTERM', () => {
      botLogger.info('Se√±al SIGTERM recibida, deteniendo bot');
      bot.stop('SIGTERM');
    });
  } catch (error) {
    botLogger.error({ error }, 'Error al iniciar el bot');
    process.exit(1);
  }
}

// Iniciar el bot
startBot();