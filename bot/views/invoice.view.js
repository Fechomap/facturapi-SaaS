// bot/views/invoice.view.js
import { Markup } from 'telegraf';

/**
 * Genera vista de resumen de factura para confirmar generaci√≥n
 * @param {Object} invoiceData - Datos de la factura
 * @param {string} transactionId - ID de transacci√≥n
 */
export function invoiceSummaryView(invoiceData, transactionId) {
  // Determinar si el cliente requiere retenci√≥n (SOS, INFOASIST, ARSA)
  const clienteNombre = invoiceData.clienteNombre || '';
  const requiresWithholding = 
    clienteNombre.includes('INFOASIST') || 
    clienteNombre.includes('ARSA') || 
    clienteNombre.includes('S.O.S') || 
    clienteNombre.includes('SOS');
  
  // Determinar tipo de servicio con informaci√≥n de retenci√≥n
  const tipoServicio = requiresWithholding ? 
    'Servicio Con Retenci√≥n (4%)' : 
    'Servicio Sin Retenci√≥n';
  
  // Usar formato est√°ndar CHUBB
  const message = 
    `üìã *Vista previa de factura*\n\n` +
    `‚Ä¢ Tipo: ${tipoServicio}\n` +
    `‚Ä¢ Cliente: ${invoiceData.clienteNombre}\n` +
    `‚Ä¢ Clave SAT: ${invoiceData.claveProducto}\n` +
    `‚Ä¢ Registros incluidos: 1\n` +
    `‚Ä¢ Monto: $${invoiceData.monto.toFixed(2)} MXN\n`;
  
  const keyboard = Markup.inlineKeyboard([
    [Markup.button.callback('‚úÖ Confirmar', `confirmar_${transactionId}`)],
    [Markup.button.callback('‚ùå Cancelar', `cancelar_${transactionId}`)]
  ]);
  
  return { message, keyboard, parse_mode: 'Markdown' };
}

/**
 * Genera vista de factura generada con opciones de descarga
 * @param {Object} invoice - Datos de la factura generada
 */
export function invoiceCreatedView(invoice) {
  const message = 
    `‚úÖ *Factura generada exitosamente*\n\n` +
    `Folio: ${invoice.series}-${invoice.folio_number}\n` +
    `Total: $${invoice.total.toFixed(2)} MXN\n\n` +
    `Seleccione una opci√≥n para descargar:`;
  
  const keyboard = Markup.inlineKeyboard([
    [Markup.button.callback('üìÑ Descargar PDF', `pdf_${invoice.id}_${invoice.folio_number}`)],
    [Markup.button.callback('üî† Descargar XML', `xml_${invoice.id}_${invoice.folio_number}`)]
  ]);
  
  return { message, keyboard, parse_mode: 'Markdown' };
}

/**
 * Genera vista de factura consultada
 * @param {Object} invoice - Datos de factura consultada
 * @param {string} estadoFactura - Estado formateado de la factura
 * @param {boolean} estaCancelada - Si la factura est√° cancelada
 */
export function invoiceDetailsView(invoice, estadoFactura, estaCancelada) {
  // Determinar si la factura est√° cancelada bas√°ndonos en el estado o cancellation_status
  const cancelada = estaCancelada || 
                   invoice.status === 'canceled' || 
                   invoice.cancellation_status === 'accepted';
  
  // Ajustar el estado a mostrar seg√∫n la condici√≥n de cancelaci√≥n
  const estadoMostrar = cancelada ? '‚õî CANCELADA' : (estadoFactura || '‚úÖ VIGENTE');
  
  let mensaje = `‚úÖ *Factura encontrada*\n\n` +
    `Folio: ${invoice.series || 'A'}-${invoice.folio_number}\n` +
    `Total: $${typeof invoice.total === 'number' ? invoice.total.toFixed(2) : invoice.total || '0.00'} MXN\n` +
    `Estado: ${estadoMostrar}\n`;
  
  if (cancelada && invoice.cancellation_date) {
    mensaje += `Fecha de cancelaci√≥n: ${invoice.cancellation_date}\n`;
  }
  
  mensaje += `\nSeleccione una opci√≥n:`;
  
  // Usar el ID de FacturAPI para los botones
  const facturaId = invoice.facturapiInvoiceId || invoice.id;
  
  // Botones diferentes seg√∫n si la factura est√° cancelada o no
  const botonesFactura = [
    [Markup.button.callback('üìÑ Descargar PDF', `pdf_${facturaId}_${invoice.folio_number}`)],
    [Markup.button.callback('üî† Descargar XML', `xml_${facturaId}_${invoice.folio_number}`)]
  ];
  
  // Solo mostramos el bot√≥n de cancelaci√≥n si la factura NO est√° cancelada
  if (!cancelada) {
    botonesFactura.push([Markup.button.callback('‚ùå Cancelar Factura', `iniciar_cancelacion_${facturaId}_${invoice.folio_number}`)]);
  }
  
  return { message: mensaje, keyboard: Markup.inlineKeyboard(botonesFactura), parse_mode: 'Markdown' };
}