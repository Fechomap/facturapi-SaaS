// bot/utils/menu-transition.utils.js
// Utilidades para transiciones suaves de men√∫s

import { Markup } from 'telegraf';

/**
 * Gestor de estado de men√∫s con historial y transiciones
 */
export class MenuStateManager {
  constructor(ctx) {
    this.ctx = ctx;
    this.initializeState();
  }

  initializeState() {
    if (!this.ctx.userState.menuSystem) {
      this.ctx.userState.menuSystem = {
        history: [],
        currentMenu: 'main',
        menuData: {},
        lastUpdate: Date.now()
      };
    }
  }

  /**
   * Navegar a un nuevo men√∫ guardando el estado actual
   */
  pushMenu(menuId, data = {}) {
    const currentState = this.ctx.userState.menuSystem;
    
    // Guardar estado actual en historial
    currentState.history.push({
      id: currentState.currentMenu,
      data: { ...currentState.menuData },
      timestamp: currentState.lastUpdate
    });

    // Actualizar estado actual
    currentState.currentMenu = menuId;
    currentState.menuData = { ...data };
    currentState.lastUpdate = Date.now();

    // Limitar historial a 10 elementos para evitar memoria excesiva
    if (currentState.history.length > 10) {
      currentState.history.shift();
    }
  }

  /**
   * Volver al men√∫ anterior
   */
  popMenu() {
    const currentState = this.ctx.userState.menuSystem;
    
    if (currentState.history.length > 0) {
      const previousMenu = currentState.history.pop();
      currentState.currentMenu = previousMenu.id;
      currentState.menuData = { ...previousMenu.data };
      currentState.lastUpdate = Date.now();
      return previousMenu;
    }
    
    return null;
  }

  /**
   * Obtener informaci√≥n del men√∫ actual
   */
  getCurrentMenu() {
    return this.ctx.userState.menuSystem;
  }

  /**
   * Limpiar historial de men√∫s
   */
  clearHistory() {
    this.ctx.userState.menuSystem.history = [];
  }

  /**
   * Obtener breadcrumb del camino actual
   */
  getBreadcrumb() {
    const history = this.ctx.userState.menuSystem.history;
    const current = this.ctx.userState.menuSystem.currentMenu;
    
    return [...history.map(h => h.id), current];
  }
}

/**
 * Utilidades para transiciones suaves
 */
export class MenuTransitionUtils {
  /**
   * Editar mensaje con estado de carga y luego mostrar contenido final
   */
  static async smoothTransition(ctx, loadingText, finalText, finalMarkup, delay = 400) {
    try {
      // Mostrar estado de carga
      await ctx.editMessageText(loadingText, { parse_mode: 'Markdown' });
      
      // Pausa para efecto visual
      if (delay > 0) {
        await new Promise(resolve => setTimeout(resolve, delay));
      }
      
      // Mostrar contenido final
      await ctx.editMessageText(finalText, {
        parse_mode: 'Markdown',
        ...finalMarkup
      });
      
      return true;
    } catch (error) {
      console.error('Error en transici√≥n suave:', error);
      
      // Fallback: mostrar contenido final directamente
      try {
        await ctx.editMessageText(finalText, {
          parse_mode: 'Markdown',
          ...finalMarkup
        });
      } catch (fallbackError) {
        console.error('Error en fallback de transici√≥n:', fallbackError);
      }
      
      return false;
    }
  }

  /**
   * Actualizar solo el teclado con feedback
   */
  static async updateKeyboardWithFeedback(ctx, newMarkup, feedbackText = '‚úÖ Actualizado') {
    try {
      // Dar feedback inmediato
      await ctx.answerCbQuery(feedbackText);
      
      // Actualizar teclado
      await ctx.editMessageReplyMarkup(newMarkup);
      
      return true;
    } catch (error) {
      // Manejar error "message not modified" silenciosamente
      if (!error.message?.includes('message is not modified')) {
        console.error('Error actualizando teclado:', error);
      }
      
      // Intentar dar feedback aunque falle la actualizaci√≥n
      try {
        await ctx.answerCbQuery(feedbackText);
      } catch (cbError) {
        console.error('Error en callback query:', cbError);
      }
      
      return false;
    }
  }

  /**
   * Transici√≥n con confirmaci√≥n de estado
   */
  static async confirmedTransition(ctx, newText, newMarkup, confirmationDelay = 300) {
    try {
      // Mostrar confirmaci√≥n temporal
      await ctx.editMessageText(
        `${newText}\n\nüîÑ *Actualizando interfaz...*`,
        { parse_mode: 'Markdown' }
      );
      
      // Pausa breve
      await new Promise(resolve => setTimeout(resolve, confirmationDelay));
      
      // Mostrar estado final
      await ctx.editMessageText(newText, {
        parse_mode: 'Markdown',
        ...newMarkup
      });
      
      return true;
    } catch (error) {
      console.error('Error en transici√≥n confirmada:', error);
      return false;
    }
  }

  /**
   * Manejar errores de edici√≥n con reintentos
   */
  static async safeEditMessage(ctx, text, markup, maxRetries = 3) {
    for (let attempt = 1; attempt <= maxRetries; attempt++) {
      try {
        // Agregar timestamp para evitar "message not modified"
        const uniqueText = attempt > 1 
          ? `${text}\n\nüîÑ *Actualizado: ${new Date().toLocaleTimeString()}*`
          : text;
        
        await ctx.editMessageText(uniqueText, {
          parse_mode: 'Markdown',
          ...markup
        });
        
        return true;
      } catch (error) {
        if (error.message?.includes('message is not modified')) {
          // Contenido id√©ntico, intentar con timestamp
          continue;
        }
        
        if (attempt === maxRetries) {
          console.error(`Error despu√©s de ${maxRetries} intentos:`, error);
          throw error;
        }
        
        // Esperar antes del siguiente intento
        await new Promise(resolve => setTimeout(resolve, 100 * attempt));
      }
    }
    
    return false;
  }

  /**
   * Actualizaci√≥n optimista (UI primero, validaci√≥n despu√©s)
   */
  static async optimisticUpdate(ctx, updateFunction, validationFunction) {
    try {
      // Actualizar UI inmediatamente
      await updateFunction();
      
      // Validar en background
      setTimeout(async () => {
        try {
          await validationFunction();
        } catch (validationError) {
          console.error('Error en validaci√≥n optimista:', validationError);
          // Aqu√≠ podr√≠as revertir o mostrar error
        }
      }, 100);
      
      return true;
    } catch (error) {
      console.error('Error en actualizaci√≥n optimista:', error);
      return false;
    }
  }
}

/**
 * Estados de carga predefinidos
 */
export const LoadingStates = {
  GENERIC: 'üîÑ *Cargando...*',
  FILTERS: 'üîÑ *Preparando filtros...*',
  CLIENTS: 'üîÑ *Cargando clientes...*',
  DATES: 'üîÑ *Configurando fechas...*',
  GENERATING: 'üîÑ *Generando reporte...*',
  UPDATING: 'üîÑ *Actualizando...*',
  SAVING: 'üîÑ *Guardando configuraci√≥n...*'
};

/**
 * Feedback de acciones predefinido
 */
export const ActionFeedback = {
  SELECTED: '‚úÖ Seleccionado',
  DESELECTED: '‚ùå Deseleccionado',
  UPDATED: '‚úÖ Actualizado',
  SAVED: 'üíæ Guardado',
  CLEARED: 'üóëÔ∏è Limpiado',
  APPLIED: '‚úÖ Aplicado',
  CANCELLED: '‚ùå Cancelado'
};

/**
 * Utilidad para crear men√∫s con estado de carga
 */
export function createLoadingMenu(loadingText = LoadingStates.GENERIC) {
  return {
    text: loadingText,
    markup: Markup.inlineKeyboard([])
  };
}

/**
 * Debounce para evitar actualizaciones muy r√°pidas
 */
export function debounce(func, wait) {
  let timeout;
  return function executedFunction(...args) {
    const later = () => {
      clearTimeout(timeout);
      func(...args);
    };
    clearTimeout(timeout);
    timeout = setTimeout(later, wait);
  };
}

/**
 * Generar breadcrumb visual para navegaci√≥n
 */
export function generateBreadcrumb(menuPath, separator = ' ‚Üí ') {
  const menuNames = {
    'main': 'üè† Inicio',
    'reportes': 'üìä Reportes',
    'excel_options': 'üìã Excel',
    'excel_filters': 'üîß Filtros',
    'excel_dates': 'üìÖ Fechas',
    'excel_clients': 'üë• Clientes'
  };

  return menuPath
    .map(id => menuNames[id] || id)
    .join(separator);
}

export default {
  MenuStateManager,
  MenuTransitionUtils,
  LoadingStates,
  ActionFeedback,
  createLoadingMenu,
  debounce,
  generateBreadcrumb
};