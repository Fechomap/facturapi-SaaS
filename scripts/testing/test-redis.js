// scripts/test-redis.js - Probar conexi√≥n y funcionalidad Redis
import redisSessionService from '../../services/redis-session.service.js';
import logger from '../../core/utils/logger.js';

const testLogger = logger.child({ module: 'redis-test' });

async function testRedisConnection() {
  console.log('üîç PROBANDO CONEXI√ìN REDIS');
  console.log('=' .repeat(50));
  
  try {
    // Verificar variables de entorno
    const redisUrl = process.env.REDIS_URL || process.env.REDISCLOUD_URL;
    console.log(`üìç Redis URL configurada: ${redisUrl ? 'S√ç' : 'NO'}`);
    
    if (redisUrl) {
      // Ocultar credenciales para logging seguro
      const safeUrl = redisUrl.replace(/:([^:@]+)@/, ':***@');
      console.log(`üîó Conectando a: ${safeUrl}`);
    }
    
    // Inicializar servicio Redis
    console.log('\n‚öôÔ∏è Inicializando servicio Redis...');
    const initResult = await redisSessionService.initialize();
    
    console.log(`‚úÖ Inicializaci√≥n: ${initResult.success ? 'EXITOSA' : 'FALL√ì'}`);
    console.log(`üì¶ Tipo de almacenamiento: ${initResult.type}`);
    
    if (initResult.warning) {
      console.log(`‚ö†Ô∏è  Advertencia: ${initResult.warning}`);
    }
    
    // Probar operaciones b√°sicas
    console.log('\nüß™ PROBANDO OPERACIONES DE SESI√ìN');
    console.log('-' .repeat(40));
    
    const testSessionId = 'test-session-' + Date.now();
    const testData = {
      userId: 'test-user-123',
      tenantId: 'test-tenant-456',
      loginTime: new Date().toISOString(),
      testData: 'Datos de prueba para clustering'
    };
    
    // Test 1: Guardar sesi√≥n
    console.log('1Ô∏è‚É£ Guardando sesi√≥n de prueba...');
    const saveResult = await redisSessionService.setSession(testSessionId, testData, 60);
    console.log(`   Resultado: ${saveResult.success ? '‚úÖ GUARDADA' : '‚ùå ERROR'}`);
    
    // Test 2: Recuperar sesi√≥n
    console.log('2Ô∏è‚É£ Recuperando sesi√≥n...');
    const getResult = await redisSessionService.getSession(testSessionId);
    console.log(`   Resultado: ${getResult.success ? '‚úÖ RECUPERADA' : '‚ùå NO ENCONTRADA'}`);
    
    if (getResult.success) {
      console.log(`   Datos: Usuario ${getResult.data.userId}, Tenant ${getResult.data.tenantId}`);
    }
    
    // Test 3: Obtener estad√≠sticas
    console.log('3Ô∏è‚É£ Obteniendo estad√≠sticas...');
    const stats = await redisSessionService.getStats();
    console.log(`   Tipo: ${stats.type}`);
    console.log(`   Conectado: ${stats.connected ? '‚úÖ S√ç' : '‚ùå NO'}`);
    console.log(`   Sesiones activas: ${stats.activeSessions || 0}`);
    
    // Test 4: Eliminar sesi√≥n
    console.log('4Ô∏è‚É£ Eliminando sesi√≥n de prueba...');
    const deleteResult = await redisSessionService.deleteSession(testSessionId);
    console.log(`   Resultado: ${deleteResult.success ? '‚úÖ ELIMINADA' : '‚ùå ERROR'}`);
    
    // Test 5: Verificar que fue eliminada
    console.log('5Ô∏è‚É£ Verificando eliminaci√≥n...');
    const verifyResult = await redisSessionService.getSession(testSessionId);
    console.log(`   Resultado: ${!verifyResult.success ? '‚úÖ CONFIRMADO' : '‚ùå A√öN EXISTE'}`);
    
    // Resultado final
    console.log('\nüìä RESULTADO FINAL');
    console.log('=' .repeat(50));
    
    if (initResult.type === 'redis' && initResult.success) {
      console.log('üéâ ¬°REDIS FUNCIONANDO PERFECTAMENTE!');
      console.log('‚úÖ El clustering tendr√° sesiones compartidas');
      console.log('‚úÖ Listo para 100+ usuarios concurrentes');
    } else if (initResult.type === 'memory' && initResult.success) {
      console.log('‚ö†Ô∏è  Usando almacenamiento en memoria');
      console.log('‚ùå Las sesiones NO se comparten entre workers');
      console.log('üí° Para 100+ usuarios: configura Redis en Railway');
    } else {
      console.log('‚ùå Error en el sistema de sesiones');
      console.log('üö® El clustering no funcionar√° correctamente');
    }
    
  } catch (error) {
    console.error('\nüí• ERROR DURANTE LA PRUEBA:');
    console.error(error.message);
    console.error('\nüîß SOLUCIONES:');
    console.error('1. Verifica que Redis est√© corriendo');
    console.error('2. Verifica REDIS_URL en variables de entorno');
    console.error('3. En Railway: agrega Redis service');
  } finally {
    // Limpiar conexi√≥n
    await redisSessionService.disconnect();
    console.log('\nüßπ Limpieza completada');
  }
}

// Ejecutar prueba
testRedisConnection().catch(console.error);