generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
  // Recomendado para conexiones externas:
  directUrl = env("DATABASE_URL")
}

model SubscriptionPlan {
  id            Int                  @id @default(autoincrement())
  name          String               @db.VarChar(50)
  description   String?
  price         Decimal              @db.Decimal(10, 2)
  currency      String               @default("MXN") @db.VarChar(3)
  billingPeriod String               @default("monthly") @db.VarChar(20)
  invoiceLimit  Int
  isActive      Boolean              @default(true)
  createdAt     DateTime             @default(now()) @map("created_at")
  updatedAt     DateTime             @default(now()) @map("updated_at")
  subscriptions TenantSubscription[]

  @@map("subscription_plans")
}

model Tenant {
  id                      String               @id @default(uuid()) @db.Uuid
  businessName            String               @map("business_name") @db.VarChar(255)
  rfc                     String               @unique @db.VarChar(20)
  email                   String               @db.VarChar(255)
  phone                   String?              @db.VarChar(20)
  address                 String?
  contactName             String?              @map("contact_name") @db.VarChar(255)
  facturapiOrganizationId String?              @map("facturapi_organization_id") @db.VarChar(100)
  facturapiApiKey         String?              @map("facturapi_api_key") @db.VarChar(255)
  isActive                Boolean              @default(true) @map("is_active")
  createdAt               DateTime             @default(now()) @map("created_at")
  updatedAt               DateTime             @default(now()) @map("updated_at")
  stripeCustomerId        String?              @map("stripe_customer_id") @db.VarChar(100)
  auditLogs               AuditLog[]
  customers               TenantCustomer[]
  documents               TenantDocument[]
  folios                  TenantFolio[]
  invoices                TenantInvoice[]
  notifications           Notification[]
  payments                TenantPayment[]
  settings                TenantSetting[]
  subscriptions           TenantSubscription[]
  users                   TenantUser[]

  @@map("tenants")
}

model TenantUser {
  id           Int             @id @default(autoincrement())
  tenantId     String          @map("tenant_id") @db.Uuid
  telegramId   BigInt          @unique @map("telegram_id")
  firstName    String?         @map("first_name") @db.VarChar(100)
  lastName     String?         @map("last_name") @db.VarChar(100)
  username     String?         @db.VarChar(100)
  role         String          @default("admin") @db.VarChar(20)
  isAuthorized Boolean         @default(false) @map("is_authorized")
  createdAt    DateTime        @default(now()) @map("created_at")
  updatedAt    DateTime        @default(now()) @map("updated_at")
  auditLogs    AuditLog[]
  invoices     TenantInvoice[]
  tenant       Tenant          @relation(fields: [tenantId], references: [id], onDelete: Cascade)

  @@map("tenant_users")
}

model TenantSubscription {
  id                    Int              @id @default(autoincrement())
  tenantId              String           @map("tenant_id") @db.Uuid
  planId                Int              @map("plan_id")
  stripeCustomerId      String?          @map("stripe_customer_id") @db.VarChar(100)
  stripeSubscriptionId  String?          @map("stripe_subscription_id") @db.VarChar(100)
  status                String           @default("trial") @db.VarChar(20)
  trialEndsAt           DateTime?        @map("trial_ends_at")
  currentPeriodStartsAt DateTime?        @map("current_period_starts_at")
  currentPeriodEndsAt   DateTime?        @map("current_period_ends_at")
  invoicesUsed          Int              @default(0) @map("invoices_used")
  createdAt             DateTime         @default(now()) @map("created_at")
  updatedAt             DateTime         @default(now()) @map("updated_at")
  payments              TenantPayment[]
  plan                  SubscriptionPlan @relation(fields: [planId], references: [id])
  tenant                Tenant           @relation(fields: [tenantId], references: [id], onDelete: Cascade)

  @@map("tenant_subscriptions")
}

model TenantPayment {
  id              Int                @id @default(autoincrement())
  tenantId        String             @map("tenant_id") @db.Uuid
  subscriptionId  Int                @map("subscription_id")
  amount          Decimal            @db.Decimal(10, 2)
  currency        String             @default("MXN") @db.VarChar(3)
  stripePaymentId String?            @map("stripe_payment_id") @db.VarChar(100)
  stripeInvoiceId String?            @map("stripe_invoice_id") @db.VarChar(100)
  paymentMethod   String?            @map("payment_method") @db.VarChar(50)
  status          String             @db.VarChar(20)
  paymentDate     DateTime?          @map("payment_date")
  createdAt       DateTime           @default(now()) @map("created_at")
  updatedAt       DateTime           @default(now()) @map("updated_at")
  subscription    TenantSubscription @relation(fields: [subscriptionId], references: [id])
  tenant          Tenant             @relation(fields: [tenantId], references: [id], onDelete: Cascade)

  @@map("tenant_payments")
}

model TenantFolio {
  id            Int      @id @default(autoincrement())
  tenantId      String   @map("tenant_id") @db.Uuid
  series        String   @default("A") @db.VarChar(5)
  currentNumber Int      @default(800) @map("current_number")
  createdAt     DateTime @default(now()) @map("created_at")
  updatedAt     DateTime @default(now()) @map("updated_at")
  tenant        Tenant   @relation(fields: [tenantId], references: [id], onDelete: Cascade)

  @@unique([tenantId, series])
  @@map("tenant_folios")
}

model TenantCustomer {
  id                  Int             @id @default(autoincrement())
  tenantId            String          @map("tenant_id") @db.Uuid
  facturapiCustomerId String          @map("facturapi_customer_id") @db.VarChar(100)
  legalName           String          @map("legal_name") @db.VarChar(255)
  rfc                 String          @db.VarChar(20)
  email               String?         @db.VarChar(255)
  phone               String?         @db.VarChar(20)
  address             String?
  isActive            Boolean         @default(true) @map("is_active")
  createdAt           DateTime        @default(now()) @map("created_at")
  updatedAt           DateTime        @default(now()) @map("updated_at")
  tenant              Tenant          @relation(fields: [tenantId], references: [id], onDelete: Cascade)
  invoices            TenantInvoice[]

  @@unique([tenantId, facturapiCustomerId])
  @@map("tenant_customers")
}

model TenantInvoice {
  id                 Int              @id @default(autoincrement())
  tenantId           String           @map("tenant_id") @db.Uuid
  facturapiInvoiceId String           @map("facturapi_invoice_id") @db.VarChar(100)
  series             String           @db.VarChar(5)
  folioNumber        Int              @map("folio_number")
  customerId         Int?             @map("customer_id")
  total              Decimal          @db.Decimal(12, 2)
  status             String           @db.VarChar(20)
  createdById        BigInt?          @map("created_by")
  createdAt          DateTime         @default(now()) @map("created_at")
  updatedAt          DateTime         @default(now()) @map("updated_at")
  dueDate            DateTime?        @map("due_date")
  invoiceDate        DateTime?        @map("invoice_date")
  lastDownloaded     DateTime?        @map("last_downloaded")
  paymentDate        DateTime?        @map("payment_date")
  paymentStatus      String?          @map("payment_status") @db.VarChar(20)
  tags               String?
  documents          TenantDocument[]
  createdBy          TenantUser?      @relation(fields: [createdById], references: [telegramId])
  customer           TenantCustomer?  @relation(fields: [customerId], references: [id])
  tenant             Tenant           @relation(fields: [tenantId], references: [id], onDelete: Cascade)

  @@unique([tenantId, facturapiInvoiceId])
  @@unique([tenantId, series, folioNumber])
  @@map("tenant_invoices")
}

model TenantDocument {
  id          Int           @id @default(autoincrement())
  tenantId    String        @map("tenant_id") @db.Uuid
  invoiceId   Int           @map("invoice_id")
  type        String        @db.VarChar(20)
  filePath    String        @map("file_path")
  fileSize    Int           @map("file_size")
  fileName    String        @map("file_name")
  contentType String        @map("content_type") @db.VarChar(50)
  uploadDate  DateTime      @default(now()) @map("upload_date")
  invoice     TenantInvoice @relation(fields: [invoiceId], references: [id], onDelete: Cascade)
  tenant      Tenant        @relation(fields: [tenantId], references: [id], onDelete: Cascade)

  @@index([tenantId, type])
  @@map("tenant_documents")
}

model TenantSetting {
  id           Int      @id @default(autoincrement())
  tenantId     String   @map("tenant_id") @db.Uuid
  settingKey   String   @map("setting_key") @db.VarChar(50)
  settingValue String?  @map("setting_value")
  createdAt    DateTime @default(now()) @map("created_at")
  updatedAt    DateTime @default(now()) @map("updated_at")
  tenant       Tenant   @relation(fields: [tenantId], references: [id], onDelete: Cascade)

  @@unique([tenantId, settingKey])
  @@map("tenant_settings")
}

model AuditLog {
  id         Int         @id @default(autoincrement())
  tenantId   String?     @map("tenant_id") @db.Uuid
  userId     Int?        @map("user_id")
  action     String      @db.VarChar(100)
  entityType String?     @map("entity_type") @db.VarChar(50)
  entityId   String?     @map("entity_id") @db.VarChar(100)
  details    Json?
  ipAddress  String?     @map("ip_address") @db.VarChar(50)
  createdAt  DateTime    @default(now()) @map("created_at")
  tenant     Tenant?     @relation(fields: [tenantId], references: [id])
  user       TenantUser? @relation(fields: [userId], references: [id])

  @@map("audit_logs")
}

model UserSession {
  id          Int      @id @default(autoincrement())
  telegramId  BigInt   @unique @map("telegram_id")
  sessionData Json     @map("session_data")
  updatedAt   DateTime @default(now()) @updatedAt @map("updated_at")

  @@index([telegramId])
  @@map("user_sessions")
}

model Notification {
  id          Int      @id @default(autoincrement())
  recipientId String   @map("recipient_id") @db.VarChar(100)
  tenantId    String?  @map("tenant_id") @db.Uuid
  channel     String   @db.VarChar(20)
  message     String
  status      String   @db.VarChar(20)
  metadata    Json?
  createdAt   DateTime @default(now()) @map("created_at")
  tenant      Tenant?  @relation(fields: [tenantId], references: [id], onDelete: Cascade)

  @@index([recipientId])
  @@index([tenantId])
  @@index([status])
  @@index([createdAt])
  @@map("notifications")
}
