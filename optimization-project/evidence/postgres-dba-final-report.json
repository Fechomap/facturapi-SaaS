{
  "timestamp": "2025-07-11T02:35:20.236Z",
  "findings": [
    {
      "severity": "CRITICAL",
      "issue": "Sequential scan detected in getNextFolio",
      "impact": "Causes 3.4 second delays",
      "fix": "Add composite index on (tenant_id, series)"
    },
    {
      "severity": "HIGH",
      "issue": "Table audit_logs has 37.5% bloat",
      "impact": "Slower queries due to table bloat",
      "fix": "VACUUM FULL audit_logs;"
    },
    {
      "severity": "HIGH",
      "issue": "Table tenant_customers has 153.33% bloat",
      "impact": "Slower queries due to table bloat",
      "fix": "VACUUM FULL tenant_customers;"
    },
    {
      "severity": "HIGH",
      "issue": "Table tenant_folios has 633.33% bloat",
      "impact": "Slower queries due to table bloat",
      "fix": "VACUUM FULL tenant_folios;"
    },
    {
      "severity": "HIGH",
      "issue": "Table tenants has 266.67% bloat",
      "impact": "Slower queries due to table bloat",
      "fix": "VACUUM FULL tenants;"
    },
    {
      "severity": "HIGH",
      "issue": "Table user_sessions has 1166.67% bloat",
      "impact": "Slower queries due to table bloat",
      "fix": "VACUUM FULL user_sessions;"
    },
    {
      "severity": "HIGH",
      "issue": "Table tenant_subscriptions has 233.33% bloat",
      "impact": "Slower queries due to table bloat",
      "fix": "VACUUM FULL tenant_subscriptions;"
    },
    {
      "severity": "HIGH",
      "issue": "Table tenant_users has 66.67% bloat",
      "impact": "Slower queries due to table bloat",
      "fix": "VACUUM FULL tenant_users;"
    },
    {
      "severity": "HIGH",
      "issue": "Table tenant_payments has 100% bloat",
      "impact": "Slower queries due to table bloat",
      "fix": "VACUUM FULL tenant_payments;"
    }
  ],
  "slowQueries": [
    {
      "query": "UPDATE tenant_folios SET current_number = current_number + 1 WHERE tenant_id = ? AND series = ?",
      "avg_time": 3437,
      "calls": "Multiple per invoice",
      "problem": "No composite index on (tenant_id, series)"
    },
    {
      "query": "SELECT * FROM user_sessions WHERE telegram_id = ?",
      "avg_time": 129,
      "calls": "Every request",
      "problem": "Cold cache, could benefit from connection pooling"
    },
    {
      "query": "SELECT * FROM tenant_customers WHERE tenant_id = ? AND legal_name LIKE ?",
      "avg_time": 128,
      "calls": "Customer searches",
      "problem": "LIKE queries need text_pattern_ops index"
    }
  ],
  "recommendations": [
    "Ejecutar el script optimize-postgres-final.sql",
    "Considerar usar pgbouncer para connection pooling",
    "Monitorear con pg_stat_statements despu√©s de optimizaciones",
    "Implementar cache Redis para queries frecuentes"
  ]
}
